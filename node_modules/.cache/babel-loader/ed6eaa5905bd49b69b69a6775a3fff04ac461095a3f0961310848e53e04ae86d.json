{"ast":null,"code":"var _jsxFileName = \"D:\\\\memory-game\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport SingleCard from \"./component/SingleCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cardImages = [{\n  src: \"/img/helmet-1.png\",\n  matched: false\n}, {\n  src: \"/img/potion-1.png\",\n  matched: false\n}, {\n  src: \"/img/ring-1.png\",\n  matched: false\n}, {\n  src: \"/img/scroll-1.png\",\n  matched: false\n}, {\n  src: \"/img/shield-1.png\",\n  matched: false\n}, {\n  src: \"/img/sword-1.png\",\n  matched: false\n}];\nfunction App() {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null);\n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages].sort(() => Math.random() - 0.5).map(card => ({\n      ...card,\n      id: Math.random()\n    }));\n    setCards(shuffledCards);\n    setTurns(0);\n  };\n  const handleChoice = card => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n    console.log(card);\n  };\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      if (choiceOne.src === choiceTwo.src) {\n        setCards(prevcard => {\n          return prevcard.map(card => {\n            if (card.src === choiceOne.src) {\n              return {\n                ...card,\n                matched: true\n              };\n            } else {\n              return card;\n            }\n          });\n        });\n        resetTurn();\n      } else {\n        resetTurn();\n      }\n    }\n  }, [choiceOne, choiceTwo]);\n  const resetTurn = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setTurns(prevTurn => prevTurn + 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Memory Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: shuffleCards,\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-grid\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(SingleCard, {\n        card: card,\n        handleChoice: handleChoice\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"/JnteANCPxCZNpFpO1ZAWIjzFcc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","SingleCard","jsxDEV","_jsxDEV","cardImages","src","matched","App","_s","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","shuffleCards","shuffledCards","sort","Math","random","map","card","id","handleChoice","console","log","prevcard","resetTurn","prevTurn","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/memory-game/src/App.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport SingleCard from \"./component/SingleCard\";\n\nconst cardImages = [\n  { src: \"/img/helmet-1.png\", matched: false },\n  { src: \"/img/potion-1.png\", matched: false },\n  { src: \"/img/ring-1.png\", matched: false },\n  { src: \"/img/scroll-1.png\", matched: false },\n  { src: \"/img/shield-1.png\", matched: false },\n  { src: \"/img/sword-1.png\", matched: false },\n];\n\nfunction App() {\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null);\n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages]\n      .sort(() => Math.random() - 0.5)\n      .map((card) => ({ ...card, id: Math.random() }));\n\n    setCards(shuffledCards);\n    setTurns(0);\n  };\n\n  const handleChoice = (card) => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n    console.log(card);\n  };\n\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      if (choiceOne.src === choiceTwo.src) {\n        setCards((prevcard) => {\n          return prevcard.map((card) => {\n            if (card.src === choiceOne.src) {\n              return { ...card, matched: true };\n            } else {\n              return card;\n            }\n          });\n        });\n        resetTurn();\n      } else {\n        resetTurn();\n      }\n    }\n  }, [choiceOne, choiceTwo]);\n\n  const resetTurn = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setTurns((prevTurn) => prevTurn + 1);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Memory Game</h1>\n      <button onClick={shuffleCards}>New Game</button>\n      <div className=\"card-grid\">\n        {cards.map((card) => (\n          <SingleCard key={card.id} card={card} handleChoice={handleChoice} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}